// 
// Copyright 2015 aweatherguy
// 
// This file is part of ABSONS which is an acronym for
// "Arduino-Based Stratum One Ntp Server".
// 
// ABSONS is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// ========================================================================
// 
// Credits:
// 
// The author of this software wishes to thank Andrew Rodland of Madison, WI
// for ideas presented on the following internet web page:
//     http://cleverdomain.org/yapc2012/
// and in software made available at the following URL:
//     http://git.cleverdomain.org/arduino/
// 
// =========================================================================
// 
// 
#pragma once
//
// the version printed when sketch starts
//
#define FIRMWARE_MAJOR  3
#define FIRMWARE_MINOR  1
#define FIRMWARE_UPDATE 6
//
// this consumes 40 bytes of ram per peer so should be no bigger than required.
//
#define MAX_SYMMETRIC_PEER_COUNT 4
//
// There are two major variants of the NTP server hardware and firmware which can be built.
//
// Advanced Variant ==> Disciplined System Clock
//
// * The GPS disciplined 10MHz output is used as the Mega's system clock.
// * Software PLL and Fractional-N dividers are not used.
// * SPI bus runs at 5MHz (F_CPU/2)
// * Timers 4/5 run at 10MHz (F_CPU)
// * Only known to work with Arduino Mega2560r3
// * Custom bootloader must be installed in the Arduino Mega
// * Custom boards.txt file required in the Arduino installation to build the sketch
//
// Basic Variant ==> Un-disciplined System Clock
//
// * The system clock is generated by a 16MHz crystal. 
//   Mega boards with ceramic resonators WILL NOT WORK HERE. If the Mega board has a
//   ceramic resonator, the only options are to change it to a 16MHz crystal, or
//   use a 10MHz GPS-disciplined clock.
// * Software PLL and Fractional-N divider are used to calibrate the 16MHz clock.
// * SPI bus runs at 4MHz (F_CPU/4)
// * Timers 4/5 run at 2MHz (F_CPU/8)
//
// All variants require:
// 
// * Arduino Mega1280, Mega2560 or Mega2560r3
// * The W5500 interrupt line is connected to digital 48.
// * GPS PPS output connected to digital 49,
//   positivie going pulse, GPS second aligned to rising edge of pulse
// * Ethernet Shield version 2
//
#define SYSCLK_DISCIPLINED  1
//
// choose the GPS hardware here...one and only one value must be one
// the remainder must be zero.
//
#define GPS_IS_HP55300A     0
#define GPS_IS_ICM_SMT_360  1
//
// the first prototype unit had different LED pin assignments
//
#define EARLY_PROTOTYPE_LEDS            0
//
// Specify info here to compute antenna cable delay. Usually this result in corrections
// of less than 100ns and is not going to make a huge difference and so should be considered optional.
// On the other hand if you have a 100-foot long antenna cable it will begin to make some
// difference (e.g. 150ns)...but still pretty small compared with the ability of most NTP clients
// to manage their clocks.
//
// the Trimble mag mount antenna p/n 66800-52D comes with 5m (500cm) of RG-174U cable with 
// a velocity factor of 66%. This translates to 25ns of delay. Antenna delay results in
// the reported GPS time being smaller than actual GPS time, so an offset must be ADDED to
// GPS time to correct for cable delay.
//
#define ANTENNA_CABLE_VELOCITY_PERCENT      66      /* user sets this */
#define ANTENNA_CABLE_LENGTH_CM             500     /* user sets this */
//
// Define the IP and MAC addresses for the NTP server. 
// Be sure to set the MAC address to match what was provided with the Ethernet shield.
// This macro is set for different addresses for the two variants...that was just for
// convenience in testing. The macro may be removed so that only one set of IP/MAC addresses
// is defined here.
//
#if SYSCLK_DISCIPLINED
#define NTP_SERVER_MAC 0xA5, 0x91, 0xCD, 0x02, 0xEE, 0x14
#define NTP_SERVER_IP 192,168,1,112
#else
#define NTP_SERVER_MAC 0xA6, 0x92, 0xCE, 0x03, 0xEF, 0x15
#define NTP_SERVER_IP 192,168,1,111
#endif
//
// uses pin digital 8 to flag some internal events for testing when non-zero
// this should be zero for normal operation
//
#define ENABLE_TIMESTAMP_DEBUG_FLAG     0
//
// ============= END OF USER CONFIGURATION SETTINGS ====================
//     Most folks will not need to make changes below this line
//
// this computes x * 2^32/10^9 = 4.2950...
// which also is about 4 + 151/2^9 + 381/2^23  (within 1/2ppb)
// this macro is good for offsets up to about 11ms (11e6 ns) 
// in ns the limit is 2^32/381 -- the largest multiplier of 381 which is in range
// more tweaks could make it work for larger offsets if necessary, but for now we're only
// using it for values less than 1ms.
//
#define OFFSET_NS_2_NTP(x) ( (x << 2) + ((151UL * x + 0x0100UL) >> 9) + ((381UL * x + 0x400000UL) >> 23) )
//
// this calculation is accurate to the ns and is verified to work for reasonable cable lengths.
// the units are quite odd however and well, it just works.
//
// if desired, comment out this define and just specify your own define of delay in ns as a simple numer
//
// e.g. #define ANTENNA_CABLE_DELAY_NS  25
//
#define ANTENNA_CABLE_DELAY_NS              ((3337UL * ANTENNA_CABLE_LENGTH_CM + 500UL * ANTENNA_CABLE_VELOCITY_PERCENT) / (1000UL * ANTENNA_CABLE_VELOCITY_PERCENT))
//
// convert delay in ns to fractional NTP time delay
//
#define ANTENNA_CABLE_DELAY_NTP             OFFSET_NS_2_NTP(ANTENNA_CABLE_DELAY_NS)

#if (!GPS_IS_HP55300A && !GPS_IS_ICM_SMT_360) || (GPS_IS_HP55300A && GPS_IS_ICM_SMT_360)
#error "Invalid GPS hardware selection"
#endif
//
// ========================== TIME UNITS =============================
//
// these values need to be all edited in unison if the configuration is changed.
// it would be possible to write macros to make it easier, 
// but it's not really all that much work. just get it right.
//
// Based the following setup:
// Processor clock          16MHz
// Timer clock              2MHz ==> must set prescaler for T4/T5 to divide by 8
// Nominal timer interval   62,500 counts
// Nominal timer cycle      31.25ms (1/32 Hz) equal to nominal interval/clock = 62,500/2MHz
// 
// NTP time conversions are for the fractional part of an NTP time value,
// for which 2^32 <==> 1 second <==> 10^9 ns.
//

#if GPS_IS_ICM_SMT_360
#define SUPPORT_DOUBLES 1   /* allows decoding of double-precision floats from GPS receiver */
#else
#define SUPPORT_DOUBLES 0
#endif

//
// the choice to keep time in ns is somewhat arbitrary and probably provides more
// resolution than is really necessary. This would probably still work fine if
// the units were 10's of ns instead for example.
//

#if SYSCLK_DISCIPLINED
#include "NtpConfigDisciplined.h"
#else
#include "NtpConfigUndisciplined.h"
#endif
